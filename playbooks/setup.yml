---

- name: Server Setup
  hosts: all
  tasks:
    - name: Server and project information
      debug:
        msg: "IP Address: {{ ansible_default_ipv4.address }}, Hostname: {{ ansible_hostname }}, Application Directory: {{ app_dir }}"

    - name: Update apt cache
      become: true
      apt:
        update_cache: yes
        cache_valid_time: 86400

    - name: Install requried packages
      become: true
      apt:
        pkg:
          - python3
          - python-apt
          - python3-pip
          - python3-setuptools
          - python3-virtualenv
          - python3-dev
          - libpq-dev
          - nginx
          - certbot
          - python3-certbot-nginx

    - name: Create app directory
      become: true
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ group }}"

    - name: Copy requirements.txt
      copy:
        src: ../requirements.txt
        dest: "{{ app_dir }}/requirements.txt"

    - name: Install packages
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ venv_dir }}"

    - name: Sync codebase
      synchronize:
        src: ../src/
        dest: "{{ app_dir }}/src"
        rsync_opts:
          - "--exclude=__pycache__"
          - "--exclude=media"
          - "--exclude=db.sqlite3"

    - name: Make manage.py executable
      file:
        path: "{{ app_dir }}/src/manage.py"
        mode: 0777

    - name: Django database migrations
      django_manage:
        command: makemigrations
        app_path: "{{ app_dir }}/src"
        virtualenv: "{{ venv_dir }}"

    - name: Django migrate database
      django_manage:
        command: migrate
        app_path: "{{ app_dir }}/src"
        virtualenv: "{{ venv_dir }}"
      
    - name: Django collect static files
      django_manage:
        command: collectstatic
        app_path: "{{ app_dir }}/src"
        virtualenv: "{{ venv_dir }}"
    
    - name: Install gunicorn
      pip:
        name: gunicorn
        virtualenv: "{{ venv_dir }}"

    - name: Copy gunicorn systemd socket & service files
      become: true
      template:
        src: "{{ item.src }}"
        dest: "/etc/systemd/system/{{ item.dist }}"
      loop:
        - { src: 'templates/gunicorn.socket.j2', dist: 'gunicorn-{{ project_name }}.socket' }
        - { src: 'templates/gunicorn.service.j2', dist: 'gunicorn-{{ project_name }}.service' }

    - name: Configure gunicorn
      become: true
      shell: "{{ item }}"
      loop:
        - systemctl daemon-reload
        - systemctl start gunicorn-{{ project_name }}
        - systemctl enable gunicorn-{{ project_name }}
        - systemctl status gunicorn-{{ project_name }}

    - name: Copy nginx server block
      become: true
      template:
        src: templates/nginx.j2
        dest: /etc/nginx/sites-available/{{ project_name }}

    - name: Unlink nginx default server block
      become: true
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Enable nginx server block
      become: True
      file:
        src: /etc/nginx/sites-available/{{ project_name }}
        dest: /etc/nginx/sites-enabled/{{ project_name }}
        state: link

    - name: Test & restart nginx
      become: true
      shell: "{{ item }}"
      loop:
        - nginx -t
        - systemctl restart nginx

    - name: Allow everything and enable UFW
      become: true
      ufw:
        state: enabled
        policy: allow

    - name: Allow nginx on UFW
      become: true
      ufw:
        rule: allow
        name: Nginx Full

    - name: Create SSL certificate
      become: True
      shell: "certbot --nginx -n -m {{ admin_email }} --agree-tos --redirect -d {{ domain }} -d www.{{ domain }}"
      when: env != "local" and enable_ssl

    - name: Daemon reload and restart gunicorn, nginx
      become: True
      shell: "{{ item }}"
      loop:
        - systemctl daemon-reload
        - systemctl restart gunicorn-{{ project_name }}
        - systemctl restart nginx
